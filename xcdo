#!/usr/bin/python

from __future__ import print_function

try:
    from typing import List
except ImportError:
    pass

import argparse
import json
import os
import subprocess
import sys


# This ArgumentParser wrapper was added to avoid amiguous prefix matching
# errors. All of the argument parsers in xcdo expect strict matching.
# See https://stackoverflow.com/a/52786878/73429
class SaneArgumentParser(argparse.ArgumentParser):
    """Disables prefix matching in ArgumentParser."""

    def _get_option_tuples(self, option_string):
        """Prevent argument parsing from looking for prefix matches."""
        return []


_SDK_TARGETS = {
    "iphoneos": "arm64-apple-ios13.0",
    "iphonesimulator": "x86_64-apple-ios13.0-simulator",
    "macosx": "x86_64-apple-macosx10.14",
}


def _main():
    # type: () -> None
    parser = SaneArgumentParser()
    parser.add_argument("-###", dest="dry_run", action="store_true")
    parser.add_argument("--sdk", "-sdk", default="macosx")
    parser.add_argument("tool")
    toolchain, tool_args = parser.parse_known_args()

    command = ["xcrun", "-sdk", toolchain.sdk, toolchain.tool]

    compilers = ("clang", "clang++", "swiftc")
    if toolchain.tool in compilers and toolchain.sdk in _SDK_TARGETS:
        command.extend(("-target", _SDK_TARGETS[toolchain.sdk]))

    tool_defaults = {
        "swiftc": _swiftc_defaults,
        "clang++": _clangxx_defaults,
        "clang": _clang_defaults,
    }
    resolve_defaults = tool_defaults.get(toolchain.tool)
    if resolve_defaults:
        command.extend(resolve_defaults(tool_args))

    command.extend(tool_args)

    if toolchain.dry_run:
        # TODO: quote where needed.
        print(*command)
        return

    process = subprocess.Popen(command, stdout=sys.stdout, stderr=sys.stderr)
    process.wait()


def _swiftc_defaults(argv):
    # type: (List[str]) -> List[str]
    parser = SaneArgumentParser("swiftc")
    parser.add_argument("-v", dest="verbose", action="store_true")
    parser.add_argument("-emit-module-interface", action="store_true")
    parser.add_argument("-emit-module-interface-path")
    parser.add_argument("-enable-library-evolution", action="store_true")
    parser.add_argument("-module-name")
    parser.add_argument("-incremental", action="store_true")
    parser.add_argument("-output-file-map")
    parser.add_argument("-enable-batch-mode", action="store_true")
    parser.add_argument("-whole-module-optimization", "-wmo", action="store_true")
    args, rest = parser.parse_known_args(argv)
    sources = [arg for arg in rest if arg.endswith(".swift")]

    defaults = []  # type: List[str]

    # Using -v shows jobs command lines and includes temp file paths. These
    # files can't be inspected unless -save-temps is given.
    # Add -save-temps to make -v more useful.
    if args.verbose:
        defaults.append("-save-temps")

    if not args.enable_library_evolution and (
        args.emit_module_interface or args.emit_module_interface_path
    ):
        defaults.append("-enable-library-evolution")

    # Generate an output-file-map for incremental compiles that need one.
    if args.incremental:
        # Fallback to the first file name as the module name.
        module_name = args.module_name or os.path.splitext(sources[0])[0]
        if not args.module_name:
            defaults.extend(("-module-name", module_name))

        ofm_path = _output_file_map(module_name, sources)
        defaults.extend(("-output-file-map", ofm_path))
        defaults.append("-driver-show-incremental")

    # Enable batch mode by default (except for WMO compiles).
    if not args.whole_module_optimization and not args.enable_batch_mode:
        defaults.append("-enable-batch-mode")

    return defaults


def _output_file_map(module_name, sources):
    # type: (str, List[str]) -> str
    if not os.path.exists("_incremental"):
        os.mkdir("_incremental")

    ofm = {
        source: {
            "object": "_incremental/{}.o".format(source),
            "swiftmodule": "_incremental/{}.swiftmodule".format(source),
            "swift-dependencies": "_incremental/{}.swiftdeps".format(source),
        }
        for source in sources
    }

    ofm[""] = {"swift-dependencies": "_incremental/{}.swiftdeps".format(module_name)}

    path = "_incremental/{}.output-file-map.json".format(module_name)
    with open(path, "w") as f:
        json.dump(ofm, f)
    return path


def _clangxx_defaults(argv):
    # type: (List[str]) -> List[str]
    return _inner_clang_defaults(argv, "clang++")


def _clang_defaults(argv):
    # type: (List[str]) -> List[str]
    return _inner_clang_defaults(argv, "clang")


def _inner_clang_defaults(argv, tool):
    # type: (List[str], str) -> List[str]
    parser = SaneArgumentParser("clang")
    parser.add_argument("-v", dest="verbose", action="store_true")
    parser.add_argument("-std")
    parser.add_argument("-S", dest="emit_assembly", action="store_true")
    parser.add_argument("-x", dest="language")
    args, rest = parser.parse_known_args(argv)

    defaults = []

    # Add -save-temps to make -v more useful.
    if args.verbose:
        defaults.append("-save-temps")

    # clang defaults to c++98. Fix that.
    if not args.std and _is_cxx(tool, args.language, rest):
        defaults.append("-std=c++17")

    # If no -W flags are given, default to -Wall.
    if not any(_is_warning_flag(x) for x in rest):
        defaults.append("-Wall")

    # Generate less noisey assembly.
    # Courtesy Greg Parker: https://twitter.com/gparker/status/1147723601656729600
    if args.emit_assembly:
        defaults.extend(("-fomit-frame-pointer", "-fno-unwind-tables"))
        # Add -Os too, if no other -O is specified.
        if not any(x.startswith("-O") for x in rest):
            defaults.append("-Os")

    # ARC is not enabled default, add it for ObjC(++)
    if any(x.endswith((".m", ".mm")) for x in rest):
        defaults.append("-fobjc-arc")

    return defaults


def _is_cxx(tool, language, args):
    # type: (str, str, List[str]) -> bool
    if tool == "clang++":
        return True
    if language in ("c++", "objective-c++"):
        return True
    if any(arg.endswith((".cpp", ".cc", ".mm")) for arg in args):
        return True
    return False


def _is_warning_flag(arg):
    # type: (str) -> bool
    return arg.startswith("-W") and not arg.startswith("-Wno-")


if __name__ == "__main__":
    _main()
